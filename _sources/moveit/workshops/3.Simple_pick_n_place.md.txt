# SIMPLE PICK & PLACE

Contents:
* Creating a package that uses moveit_cpp
* Adding configuration files
* Writing a launch file for a moveit_cpp node
* Writing a simple pick & place application
* Running the application

## 1. Creating a package that uses moveit_cpp
The first step to write an application that leverages moveit_cpp is to create a package with the necessary dependencies and files.

To do so you should use the following command in your workspace's src folder:

```bash
ros2 pkg create \
    --description "A simple pick and place application using moveit_cpp interface" \
    --build-type ament_cmake \
    --dependencies rclcpp moveit moveit_msgs moveit_ros_planning \
    --license Apache-2.0 \
    --maintainer "Your Name" \
    --maintainer-email "Your Email" \
    --node-name pick_n_place_node \
    ur5e_cell_pick_and_place
```

No create a config and a launch directory in the created package:

```bash
cd ur5e_cell_pick_and_place
mkdir config launch
```

To make sure the files in the launch and config directories are installed with the package, add the following lines to your CmakeLists.txt after the ``install(TARGETS ...)`` line:

```cmake
install(DIRECTORY launch config
  DESTINATION share/${PROJECT_NAME}
)
```

Now your package is ready to be used.

## 2. Adding moveit_cpp configuration file
Before we start with the real development, we'll already add the configuration file for the moveit_cpp node we are going to create. This file will be used to configure the node and to set up the planning pipeline.

To do so, create a file called ``moveitcpp.yaml`` in the config directory and add the following content:

```yaml
planning_scene_monitor_options:
  name: "planning_scene_monitor"
  robot_description: "robot_description"
  joint_state_topic: "/joint_states"
  attached_collision_object_topic: "/moveit_cpp/planning_scene_monitor"
  publish_planning_scene_topic: "/moveit_cpp/publish_planning_scene"
  monitored_planning_scene_topic: "/moveit_cpp/monitored_planning_scene"
  wait_for_initial_state_timeout: 10.0

planning_pipelines:
  #namespace: "moveit_cpp"  # optional, default is ~
  pipeline_names: ["pilz_industrial_motion_planner"]

plan_request_params:
  planning_attempts: 1
  planning_pipeline: pilz_industrial_motion_planner
  planner_id: "LIN"
  max_velocity_scaling_factor: 0.5
  max_acceleration_scaling_factor: 0.5
```

You can see, that this basically defines where the node will get the robot description from and which planning pipeline to use. You can experiment with it later on.

## 3. Writing a launch file for a moveit_cpp node
Now we are going to write two launch files. One for the ur_robot_driver and one for the moveit_cpp node, which we are going to create.

1. Create a file called ``pick_n_place_driver.launch.py`` in the launch directory. This file will start the ur_robot_driver and an rviz instance, but it will not start a move_group node.

```python
from launch import LaunchDescription
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import PathJoinSubstitution
from launch_ros.substitutions import FindPackageShare


def generate_launch_description():
    # Start the ur_robot driver with fake hardware using
    # the ur5e_cell_description package and its workcell.
    # urdf.xacro file
    ur_control_launch = IncludeLaunchDescription(
        launch_description_source=PythonLaunchDescriptionSource(
            PathJoinSubstitution([FindPackageShare("ur_robot_driver"), "launch", "ur_control.launch.py"])
        ),
        launch_arguments={
            "ur_type": "ur5e",              
            "use_fake_hardware": "true",
            "initial_joint_controller": "joint_trajectory_controller",
            "activate_joint_controller": "true",
            "robot_ip": "xxx.yyy.zzz.vvv",
            "description_package": "ur5e_cell_description",
            "description_file": "workcell.urdf.xacro",
            "launch_rviz": "true"
            }.items()
    )
    
    
    ld = LaunchDescription(
        [
            ur_control_launch
        ]
    )
    
    return ld
```
2. Create a file called ``pick_n_place.launch.py`` in the launch directory. This file will start the moveit_cpp node we will create in the next section.

```python
from launch import LaunchDescription
from launch_ros.actions import Node
from ament_index_python.packages import get_package_share_directory
from moveit_configs_utils import MoveItConfigsBuilder

def generate_launch_description():

    # Load the moveit_configuration from the 
    # ur5e_cell_moveit_config package and add the
    # moveit_cpp.yaml file from the ur5e_cell_pick_n_place
    # package to the parameters
    moveit_config = (
        MoveItConfigsBuilder("ur5e_workcell", package_name="ur5e_cell_moveit_config")
        .robot_description(file_path="config/ur5e_workcell.urdf.xacro")
        .moveit_cpp(
            file_path=get_package_share_directory("ur5e_cell_pick_n_place")
            + "/config/moveitcpp.yaml"
        )
        .to_moveit_configs()
    )
    
    # Run the pick_n_place_node with the loaded 
    # moveit_config
    moveit_cpp_node = Node(
        name="pick_n_place_node",
        package="ur5e_cell_pick_n_place",
        executable="pick_n_place_node",
        output="screen",
        parameters=[moveit_config.to_dict()],
    )
    
    return LaunchDescription(
        [
            moveit_cpp_node
        ]
    )
```

Now you can start the pick_n_place_driver.launch.py. It will start the controllers for the robot with fake hardware. An rviz instance will also be started, so you can see the robot in rviz and inspect the tfs of the robot.

```bash
ros2 launch ur5e_cell_pick_n_place pick_n_place_driver.launch.py
```
## 4. Writing the pick_n_place_node
Now we are going to write the pick_n_place_node. This node will be responsible for the pick and place application. It will use the moveit_cpp interface to plan and execute the pick and place motion.

1. Open the ``pick_n_place_node.cpp`` file in the src directory of the ur5e_cell_pick_n_place package. The ``ros2 pkg create`` command already created it. Add the following includes to the top of the file:

```cpp
#include <rclcpp/rclcpp.hpp>
#include <memory>
#include <moveit/moveit_cpp/moveit_cpp.h>
#include <moveit/moveit_cpp/planning_component.h>
#include <geometry_msgs/msg/point_stamped.h>
```

2. Now add a main function that starts rclcpp and shuts it down when the node is destroyed:

```cpp
int main(int argc, char** argv)
{
  rclcpp::init(argc, argv);
  //Where the applicaiton code goes.
  rclcpp::shutdown();
  return 0;
}
```

```{note}
**Hint**: You can use the ``colcon build`` command to build the package after each step and the ``ros2 launch ur5e_cell_pick_n_place pick_n_place.launch.py`` command to start the pick_n_place_node and see the progress.
```

3. The next step is to create a ROS2 node, add it to an executor and spin the executor in a seperate thread.

```cpp
  // Configure the node options to automatically declare parameters, 
  // this is necessary for moveit_cpp to work
  rclcpp::NodeOptions node_options;
  node_options.automatically_declare_parameters_from_overrides(true);

  // Create the node
  rclcpp::Node::SharedPtr node = rclcpp::Node::make_shared("pick_n_place_node", "", node_options);

  //Create an executor
  rclcpp::executors::SingleThreadedExecutor executor;

  // Add the node to the executor
  executor.add_node(node);

  // Spin the executor in a seperate thread
  std::thread([&executor]() { executor.spin(); }).detach();
```

4. Now we are going to create a moveit_cpp instance and a planning component. The planning component will be used to plan and execute the pick and place motion.

```cpp
  // Define the planning group we are using, we called it "arm" in moveit setup assistant. 
  static const std::string PLANNING_GROUP = "arm";

  // Add moveit_cpp to the node we created.
  auto moveit_cpp_ptr = std::make_shared<moveit_cpp::MoveItCpp>(node);

  // Tell the Planning Scene Monitor to provide the planning scene service
  moveit_cpp_ptr->getPlanningSceneMonitor()->providePlanningSceneService();

  // Create a planning component for the planning group we defined above
  auto planning_components = std::make_shared<moveit_cpp::PlanningComponent>(PLANNING_GROUP, moveit_cpp_ptr);
```

5. Now we can start planning using pose goals. One issue is that a pose takes the orientation in quaternion, which is not very intuitive. Therefore we will use the tf2 library to translate a roll pitch yaw orientation to a quaternion.

```cpp
  tf2::Quaternion q;

  // Set the orientation of the tool to face downwards for picking.
  q.setRPY(-3.14,0,1.57);
```

6. We can now start defining goal poses for our pick and place application. We are going to start the application from the ``start position``, the move sequentially to the ``approach_object_1``, ``pick_object_1``, ``approach_object_1``, ``approach_object_2``, ``pick_object_2`` poses, then we are going to move back to ``start position``. All poses take the orientation we defined above. You find the posisitions of the poses in the table below.  
   
    | Positions | X | Y | Z |
    | --- | --- | --- | --- |
    | start position | -0.17 | 0.0 | 1.5 |
    | approach_object_1 | -0.17 | 0.16 | 1.2 |
    | pick_object_1 | -0.17 | 0.16 | 1.05 |
    | approach_object_2 | -0.17 | 0.10 | 1.2 |
    | pick_object_2 | -0.17 | 0.10 | 1.05 |  
    
    The goal pose to the planner can be defined as a PoseStamped message. The PoseStamped message takes the position and orientation of the pose. In the header of the message we need to define the ``frame_id``, which defines the coordinate system that the pose is defined in. We will chose the ``world`` frame. Here is an example of how to define a pose:

    ```cpp
    geometry_msgs::msg::PoseStamped start_position;
    start_position.header.frame_id = "world";
    start_position.pose.position.x = -0.17;
    start_position.pose.position.y = 0.0;
    start_position.pose.position.z = 1.5;
    start_position.pose.orientation.x = q.getX();
    start_position.pose.orientation.y = q.getY();
    start_position.pose.orientation.z = q.getZ();
    start_position.pose.orientation.w = q.getW();
    ```

    Create the poses for all the poses defined above.

7. Now we can start planning. We will use the ``plan()`` function of the ``planning_components`` to plan a motion to the goal pose. The ``plan()`` function takes a ``geoemtry_msgs::msg::PoseStamped`` message as input and returns a ``moveit_cpp::PlanningComponent::PlanSolution`` object.
The ``PlanSolution`` object can be evaluated in an if statement to check if planning was successful. If planning was successful the planned trajectory is stored in the ``trajectory_`` member of the ``PlanSolution`` object.

    The first thing to do for creating a plan is to set the start state. We use the current state of the robot. Then we set the goal pose and start planning. Here is an example of how to plan to the ``start_position`` pose:

    ```cpp
      // Set the start state to the current state
      planning_components->setStartStateToCurrentState();
      // Set the goal pose and the planning frame
      planning_components->setGoal(start_position, "tool_tip");

      // Plan to the goal pose
      const moveit_cpp::PlanningComponent::PlanSolution to_start_plan = planning_components->plan();

      // Check if planning was successful
      if(!to_start_plan)
      {
          RCLCPP_INFO(node->get_logger(), "Planning to start failed.");
          rclcpp::shutdown();
          return 0;
      }
      // Execute the planned trajectory
      moveit_cpp_ptr->execute("arm", to_start_plan.trajectory);
    ```

    Add the planning and exectution steps for the whole pick and place sequence: ``start position`` -> ``approach_object_1`` -> ``pick_object_1``->``approach_object_1`` -> ``approach_object_2`` -> ``pick_object_2`` -> ``start position``.

Now you can execute the full pick an place sequence.

1. **Advanced**: We are still missing the commands to open and close the gripper. On the real robot, the gripper is connected to the Digital Ouputs 0 and 1. For opening and closing the gripper we need to set the Digital Outputs as shown in the following table.
   
    | State | DO0 | DO1 |
    | --- | --- | --- |
    | Open | 1 | 0 |
    | Closed | 0 | 1 |

    The ur_robot_driver provides a service to set the Digital Outputs under ``/io_and_status_controller/set_io``. The service takes a ``ur_msgs::srv::SetIO`` message as input. The ``SetIO`` message takes the following parameters:
    - ``fun``: The function of the Digital Output. For setting digital outputs use:  
    ``ur_msgs::srv::SetIO::Request::FUN_SET_DIGITAL_OUT``
    - ``pin``: The pin number of the Digital Output. 0 for DO0 and 1 for DO1.  
    ``ur_msgs::srv::SetIO::Request::PIN_DOUT0/DOUT1``
    - ``state``: The state of the Digital Output.  
    ``ur_msgs::srv::SetIO::Request::STATE_ON/OFF``

    <br/>
    Add a service client to the node to call the ``/io_and_status_controller/set_io`` service. Then add the commands to open and close the gripper to the pick and place sequence.

    <br/>

    > **Node**: The ``SetIO`` service is not available in simulation. Therefore you can only test the full pick and place sequence on the real robot.





